2:I[6433,["501","static/chunks/c16f53c3-cffc4db038297111.js","96","static/chunks/96-53dc8bc23e7cf269.js","814","static/chunks/app/(notes)/data-structures/dynamic-array/page-9e4053d593283b77.js"],"default"]
8:I[4707,[],""]
9:I[6423,[],""]
3:T14f7,<span class="keyword">type</span> <span class="type">dynamic_array</span><span class="punctuation">:</span>
   <span class="operator">*</span>head
    size<span class="punctuation">:</span> <span class="builtin">int</span>
    capacity<span class="punctuation">:</span> <span class="builtin">int</span>
    
    <span class="keyword">constructor</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">,</span> capacity<span class="punctuation">)</span><span class="punctuation">:</span>
        <span class="soft-keyword">self</span><span class="punctuation">.</span>size <span class="operator">=</span> <span class="number">0</span>
        <span class="soft-keyword">self</span><span class="punctuation">.</span>capacity <span class="operator">=</span> capacity
        <span class="soft-keyword">self</span><span class="punctuation">.</span>head <span class="operator">=</span> <span class="object">memory_allocate</span><span class="punctuation">(</span>capacity<span class="punctuation">)</span>

    <span class="keyword">destructor</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">)</span><span class="punctuation">:</span>
        <span class="object">memory_free</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">.</span>head<span class="punctuation">)</span>

    <span class="keyword">method</span> <span class="function">resize</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">,</span> capacity<span class="punctuation">)</span><span class="punctuation">:</span>
        <span class="soft-keyword">self</span><span class="punctuation">.</span>head <span class="operator">=</span> <span class="object">memory_reallocate</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">.</span>head<span class="punctuation">,</span> capacity<span class="punctuation">)</span>        
        <span class="soft-keyword">self</span><span class="punctuation">.</span>capacity <span class="operator">=</span> capacity

    <span class="keyword">method</span> <span class="function">append</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">,</span> item<span class="punctuation">)</span><span class="punctuation">:</span>
        <span class="keyword">if</span> <span class="soft-keyword">self</span><span class="punctuation">.</span>size <span class="operator">==</span> <span class="soft-keyword">self</span><span class="punctuation">.</span>capacity<span class="punctuation">:</span>
            <span class="soft-keyword">self</span><span class="punctuation">.</span>resize<span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">.</span>capacity <span class="operator">*</span> <span class="number">2</span><span class="punctuation">)</span>

        <span class="operator">*</span><span class="punctuation">(</span>head <span class="operator">+</span> <span class="soft-keyword">self</span><span class="punctuation">.</span>size<span class="punctuation">)</span> <span class="operator">=</span> item
        <span class="soft-keyword">self</span><span class="punctuation">.</span>size<span class="operator">+</span><span class="operator">+</span>
    
    <span class="keyword">method</span> <span class="function">delete</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">)</span><span class="punctuation">:</span>
        <span class="keyword">assert</span> <span class="soft-keyword">self</span><span class="punctuation">.</span>size <span class="operator">&gt;</span> <span class="number">0</span>
        
        <span class="keyword">if</span> size <span class="operator">*</span> <span class="number">4</span> <span class="operator">&lt;</span> capacity<span class="punctuation">:</span>
            <span class="soft-keyword">self</span><span class="punctuation">.</span>resize<span class="punctuation">(</span>capacity <span class="operator">/</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">;</span>

        <span class="soft-keyword">self</span><span class="punctuation">.</span>size<span class="operator">-</span><span class="operator">-</span>
        
    <span class="keyword">operator</span> <span class="soft-keyword">self</span><span class="punctuation">[</span>index<span class="punctuation">]</span><span class="punctuation">:</span>
        <span class="keyword">return</span> <span class="operator">*</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">.</span>head <span class="operator">+</span> index<span class="punctuation">)</span>
        
    <span class="keyword">operator</span> <span class="soft-keyword">self</span><span class="punctuation">[</span>index<span class="punctuation">]</span> <span class="operator">=</span> value<span class="punctuation">:</span>
        <span class="operator">*</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">.</span>head <span class="operator">+</span> index<span class="punctuation">)</span> <span class="operator">=</span> value4:T488,<span class="keyword">function</span> <span class="function">remove</span><span class="punctuation">(</span><span class="type">array</span><span class="punctuation">,</span> index<span class="punctuation">)</span><span class="punctuation">:</span>
    <span class="keyword">assert</span> <span class="number">0</span> <span class="operator">&lt;=</span> index <span class="operator">&lt;=</span> <span class="type">array</span><span class="punctuation">.</span>size
    
    <span class="type">array</span><span class="punctuation">.</span>size<span class="operator">-</span><span class="operator">-</span>
    <span class="keyword">for</span> i <span class="operator">=</span> index<span class="punctuation">,</span> i <span class="operator">&lt;</span> <span class="type">array</span><span class="punctuation">.</span>size<span class="punctuation">:</span>
        <span class="type">array</span><span class="punctuation">[</span>i<span class="punctuation">]</span> <span class="operator">=</span> <span class="type">array</span><span class="punctuation">[</span>i<span class="operator">+</span><span class="number">1</span><span class="punctuation">]</span>5:T5ac,<span class="keyword">function</span> <span class="function">insert</span><span class="punctuation">(</span><span class="type">array</span><span class="punctuation">,</span> index<span class="punctuation">,</span> item<span class="punctuation">)</span><span class="punctuation">:</span>
    <span class="keyword">assert</span> <span class="number">0</span> <span class="operator">&lt;=</span> index <span class="operator">&lt;=</span> <span class="type">array</span><span class="punctuation">.</span>size
    
    <span class="type">array</span><span class="punctuation">.</span>size<span class="operator">+</span><span class="operator">+</span>
    <span class="keyword">for</span> i <span class="operator">=</span> <span class="type">array</span><span class="punctuation">.</span>size<span class="punctuation">,</span> i <span class="operator">&gt;</span> index<span class="punctuation">,</span> i<span class="operator">-</span><span class="operator">-</span><span class="punctuation">:</span>
        <span class="type">array</span><span class="punctuation">[</span>i<span class="punctuation">]</span> <span class="operator">=</span> <span class="type">array</span><span class="punctuation">[</span>i<span class="operator">-</span><span class="number">1</span><span class="punctuation">]</span>
        
    <span class="type">array</span><span class="punctuation">[</span>index<span class="punctuation">]</span> <span class="operator">=</span> item6:T19bc,<span class="keyword">typedef</span> <span class="builtin">int</span> T<span class="punctuation">;</span>

<span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="class-name">dynamic_array</span>
<span class="punctuation">{</span>
    T <span class="operator">*</span>head<span class="punctuation">;</span>
    <span class="builtin">int</span> size<span class="punctuation">;</span>
    <span class="builtin">int</span> capacity<span class="punctuation">;</span>
<span class="punctuation">}</span> dynamic_array<span class="punctuation">;</span>

dynamic_array <span class="function">constructor</span><span class="punctuation">(</span><span class="builtin">int</span> capacity<span class="punctuation">)</span>
<span class="punctuation">{</span>
    dynamic_array array<span class="punctuation">;</span>
    array<span class="punctuation">.</span>size <span class="operator">=</span> <span class="number">0</span><span class="punctuation">;</span>
    array<span class="punctuation">.</span>capacity <span class="operator">=</span> capacity<span class="punctuation">;</span>
    array<span class="punctuation">.</span>head <span class="operator">=</span> <span class="function">calloc</span><span class="punctuation">(</span>capacity<span class="punctuation">,</span> <span class="keyword">sizeof</span><span class="punctuation">(</span>T<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">;</span>

    <span class="keyword">return</span> array<span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">void</span> <span class="function">destructor</span><span class="punctuation">(</span>dynamic_array <span class="operator">*</span>array<span class="punctuation">)</span>
<span class="punctuation">{</span>
    <span class="function">free</span><span class="punctuation">(</span>array<span class="operator">-&gt;</span>head<span class="punctuation">)</span><span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">void</span> <span class="function">resize</span><span class="punctuation">(</span>dynamic_array <span class="operator">*</span>array<span class="punctuation">,</span> <span class="builtin">int</span> capacity<span class="punctuation">)</span>
<span class="punctuation">{</span>
    array<span class="operator">-&gt;</span>head <span class="operator">=</span> <span class="function">realloc</span><span class="punctuation">(</span>array<span class="operator">-&gt;</span>head<span class="punctuation">,</span> <span class="keyword">sizeof</span><span class="punctuation">(</span>T<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">;</span>
    array<span class="operator">-&gt;</span>capacity <span class="operator">=</span> capacity<span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">void</span> <span class="function">append</span><span class="punctuation">(</span>dynamic_array <span class="operator">*</span>array<span class="punctuation">,</span> T value<span class="punctuation">)</span>
<span class="punctuation">{</span>
    <span class="keyword">if</span> <span class="punctuation">(</span>array<span class="operator">-&gt;</span>size <span class="operator">==</span> array<span class="operator">-&gt;</span>capacity<span class="punctuation">)</span>
        <span class="function">resize</span><span class="punctuation">(</span>array<span class="punctuation">,</span> array<span class="operator">-&gt;</span>capacity <span class="operator">*</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">;</span>

    <span class="operator">*</span><span class="punctuation">(</span>array<span class="operator">-&gt;</span>head <span class="operator">+</span> array<span class="operator">-&gt;</span>size<span class="punctuation">)</span> <span class="operator">=</span> value<span class="punctuation">;</span>
    array<span class="operator">-&gt;</span>size<span class="operator">++</span><span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">void</span> <span class="function">delete</span><span class="punctuation">(</span>dynamic_array <span class="operator">*</span>array<span class="punctuation">)</span>
<span class="punctuation">{</span>
    <span class="keyword">if</span> <span class="punctuation">(</span>array<span class="operator">-&gt;</span>size <span class="operator">==</span> <span class="number">0</span><span class="punctuation">)</span>
        <span class="keyword">return</span><span class="punctuation">;</span>
    <span class="keyword">if</span> <span class="punctuation">(</span>array<span class="operator">-&gt;</span>size <span class="operator">*</span> <span class="number">4</span> <span class="operator">&lt;</span> array<span class="operator">-&gt;</span>capacity<span class="punctuation">)</span>
        <span class="function">resize</span><span class="punctuation">(</span>array<span class="punctuation">,</span> array<span class="operator">-&gt;</span>capacity <span class="operator">/</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">;</span>

    array<span class="operator">-&gt;</span>size<span class="operator">--</span><span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">int</span> <span class="function">get</span><span class="punctuation">(</span>dynamic_array array<span class="punctuation">,</span> <span class="builtin">int</span> index<span class="punctuation">)</span>
<span class="punctuation">{</span>
    <span class="keyword">return</span> <span class="operator">*</span><span class="punctuation">(</span>array<span class="punctuation">.</span>head <span class="operator">+</span> index<span class="punctuation">)</span><span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">void</span> <span class="function">set</span><span class="punctuation">(</span>dynamic_array <span class="operator">*</span>array<span class="punctuation">,</span> <span class="builtin">int</span> index<span class="punctuation">,</span> T value<span class="punctuation">)</span>
<span class="punctuation">{</span>
    <span class="operator">*</span><span class="punctuation">(</span>array<span class="operator">-&gt;</span>head <span class="operator">+</span> index<span class="punctuation">)</span> <span class="operator">=</span> value<span class="punctuation">;</span>
<span class="punctuation">}</span>7:T419,typedef int T;

typedef struct dynamic_array
{
    T *head;
    int size;
    int capacity;
} dynamic_array;

dynamic_array constructor(int capacity)
{
    dynamic_array array;
    array.size = 0;
    array.capacity = capacity;
    array.head = calloc(capacity, sizeof(T));

    return array;
}

void destructor(dynamic_array *array)
{
    free(array->head);
}

void resize(dynamic_array *array, int capacity)
{
    array->head = realloc(array->head, sizeof(T));
    array->capacity = capacity;
}

void append(dynamic_array *array, T value)
{
    if (array->size == array->capacity)
        resize(array, array->capacity * 2);

    *(array->head + array->size) = value;
    array->size++;
}

void delete(dynamic_array *array)
{
    if (array->size == 0)
        return;
    if (array->size * 4 < array->capacity)
        resize(array, array->capacity / 2);

    array->size--;
}

int get(dynamic_array array, int index)
{
    return *(array.head + index);
}

void set(dynamic_array *array, int index, T value)
{
    *(array->head + index) = value;
}a:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
b:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
c:{"display":"inline-block"}
d:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["upR99tpWpX5mG6jNIj0J0",[[["",{"children":["(notes)",{"children":["data-structures",{"children":["dynamic-array",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(notes)",{"children":["data-structures",{"children":["dynamic-array",{"children":["__PAGE__",{},[["$L1",[["$","div",null,{"className":"title","children":["$","h1",null,{"children":"Динамический массив"}]}],["$","section",null,{"children":[["$","div",null,{"className":"par","children":[["$","p",null,{"children":"Динамический массив – массив, который может изменять свой размер в зависимости от количества элементов, которые в нем находятся."}],["$","p",null,{"children":["Кроме операции доступа и изменения произвольного элемента есть еще добавление элемента в конец и удаление элемента из конца, которые работают за амортизированное время ",["$","span",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>"}}],"."]}]]}],["$","div",null,{"className":"par","children":["$","p",null,{"children":["В динамическом массиве 3 поля: указатель на первый элемент"," ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"<span class=\"operator\">*</span>head"}}],false]}]," (или статический массив), размер динамического массива ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-undefined","dangerouslySetInnerHTML":{"__html":"size"}}],false]}]," и его максимальная вместимость ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-undefined","dangerouslySetInnerHTML":{"__html":"capacity"}}],false]}],"."]}]}],["$","div",null,{"className":"codeblock","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"<span class=\"keyword\">type</span> <span class=\"type\">dynamic_array</span><span class=\"punctuation\">:</span>\n   <span class=\"operator\">*</span>head\n    size<span class=\"punctuation\">:</span> <span class=\"builtin\">int</span>\n    capacity<span class=\"punctuation\">:</span> <span class=\"builtin\">int</span>"}}],["$","$L2",null,{"text":"type dynamic_array:\n   *head\n    size: int\n    capacity: int"}]]}],["$","div",null,{"className":"par","children":[["$","p",null,{"children":["Когда внутренний статический массив полностью заполнен (когда"," ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"size <span class=\"operator\">==</span> capacity"}}],false]}],"), его необходимо расширить – деаллоцировать и заново аллоцировать с большим размером памяти."]}],["$","p",null,{"children":["Для достижения амортизированного времени вставки ",["$","span",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>"}}]," ","(с учетом расширения), увеличивать вместимость массива необходимо в какое-то константное количество раз."]}]]}],["$","div",null,{"className":"codeblock","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"$3"}}],["$","$L2",null,{"text":"type dynamic_array:\n   *head\n    size: int\n    capacity: int\n    \n    constructor(self, capacity):\n        self.size = 0\n        self.capacity = capacity\n        self.head = memory_allocate(capacity)\n\n    destructor(self):\n        memory_free(self.head)\n\n    method resize(self, capacity):\n        self.head = memory_reallocate(self.head, capacity)        \n        self.capacity = capacity\n\n    method append(self, item):\n        if self.size == self.capacity:\n            self.resize(self.capacity * 2)\n\n        *(head + self.size) = item\n        self.size++\n    \n    method delete(self):\n        assert self.size > 0\n        \n        if size * 4 < capacity:\n            self.resize(capacity / 2);\n\n        self.size--\n        \n    operator self[index]:\n        return *(self.head + index)\n        \n    operator self[index] = value:\n        *(self.head + index) = value"}]]}],["$","div",null,{"className":"codeblock","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"$4"}}],["$","$L2",null,{"text":"function remove(array, index):\n    assert 0 <= index <= array.size\n    \n    array.size--\n    for i = index, i < array.size:\n        array[i] = array[i+1]"}]]}],["$","div",null,{"className":"codeblock","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"$5"}}],["$","$L2",null,{"text":"function insert(array, index, item):\n    assert 0 <= index <= array.size\n    \n    array.size++\n    for i = array.size, i > index, i--:\n        array[i] = array[i-1]\n        \n    array[index] = item"}]]}]]}],["$","section",null,{"children":[["$","h1",null,{"children":"Реализация"}],["$","div",null,{"className":"codeblock","children":[["$","code",null,{"className":"language-c","dangerouslySetInnerHTML":{"__html":"$6"}}],["$","$L2",null,{"text":"$7"}]]}]]}]],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/65b103bb7f88dd3f.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/e971e92105f5cd51.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/ef46db3751d8e999.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/66e2015fe6c63f65.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/dbe25359f7f6b270.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","(notes)","children","data-structures","children","dynamic-array","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","(notes)","children","data-structures","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a519598dee6f2717.css","precedence":"next","crossOrigin":"$undefined"}]],["$","article",null,{"children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","(notes)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/31ca91813e21a378.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ru","children":["$","body",null,{"className":"__variable_8aafdc __variable_c80cc2","children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$a","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$b","children":"404"}],["$","div",null,{"style":"$c","children":["$","h2",null,{"style":"$d","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]}]],null],null],["$Le",null]]]]
e:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Динамический массив"}],["$","meta","3",{"name":"description","content":"..."}]]
1:null
