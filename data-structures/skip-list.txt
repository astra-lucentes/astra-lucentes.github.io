2:I[5878,["5501","static/chunks/c16f53c3-263c4e379e12b9c7.js","7096","static/chunks/7096-6d1c431b58ffd388.js","5878","static/chunks/5878-f84dc20828bf89ac.js","3206","static/chunks/app/(notes)/data-structures/skip-list/page-c8532820c1864169.js"],"Image"]
4:I[3474,["5501","static/chunks/c16f53c3-263c4e379e12b9c7.js","7096","static/chunks/7096-6d1c431b58ffd388.js","5878","static/chunks/5878-f84dc20828bf89ac.js","3206","static/chunks/app/(notes)/data-structures/skip-list/page-c8532820c1864169.js"],"default"]
6:I[4707,[],""]
7:I[6423,[],""]
3:T19bc,<span class="keyword">typedef</span> <span class="builtin">int</span> T<span class="punctuation">;</span>

<span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="class-name">dynamic_array</span>
<span class="punctuation">{</span>
    T <span class="operator">*</span>head<span class="punctuation">;</span>
    <span class="builtin">int</span> size<span class="punctuation">;</span>
    <span class="builtin">int</span> capacity<span class="punctuation">;</span>
<span class="punctuation">}</span> dynamic_array<span class="punctuation">;</span>

dynamic_array <span class="function">constructor</span><span class="punctuation">(</span><span class="builtin">int</span> capacity<span class="punctuation">)</span>
<span class="punctuation">{</span>
    dynamic_array array<span class="punctuation">;</span>
    array<span class="punctuation">.</span>size <span class="operator">=</span> <span class="number">0</span><span class="punctuation">;</span>
    array<span class="punctuation">.</span>capacity <span class="operator">=</span> capacity<span class="punctuation">;</span>
    array<span class="punctuation">.</span>head <span class="operator">=</span> <span class="function">calloc</span><span class="punctuation">(</span>capacity<span class="punctuation">,</span> <span class="keyword">sizeof</span><span class="punctuation">(</span>T<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">;</span>

    <span class="keyword">return</span> array<span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">void</span> <span class="function">destructor</span><span class="punctuation">(</span>dynamic_array <span class="operator">*</span>array<span class="punctuation">)</span>
<span class="punctuation">{</span>
    <span class="function">free</span><span class="punctuation">(</span>array<span class="operator">-&gt;</span>head<span class="punctuation">)</span><span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">void</span> <span class="function">resize</span><span class="punctuation">(</span>dynamic_array <span class="operator">*</span>array<span class="punctuation">,</span> <span class="builtin">int</span> capacity<span class="punctuation">)</span>
<span class="punctuation">{</span>
    array<span class="operator">-&gt;</span>head <span class="operator">=</span> <span class="function">realloc</span><span class="punctuation">(</span>array<span class="operator">-&gt;</span>head<span class="punctuation">,</span> <span class="keyword">sizeof</span><span class="punctuation">(</span>T<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">;</span>
    array<span class="operator">-&gt;</span>capacity <span class="operator">=</span> capacity<span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">void</span> <span class="function">append</span><span class="punctuation">(</span>dynamic_array <span class="operator">*</span>array<span class="punctuation">,</span> T value<span class="punctuation">)</span>
<span class="punctuation">{</span>
    <span class="keyword">if</span> <span class="punctuation">(</span>array<span class="operator">-&gt;</span>size <span class="operator">==</span> array<span class="operator">-&gt;</span>capacity<span class="punctuation">)</span>
        <span class="function">resize</span><span class="punctuation">(</span>array<span class="punctuation">,</span> array<span class="operator">-&gt;</span>capacity <span class="operator">*</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">;</span>

    <span class="operator">*</span><span class="punctuation">(</span>array<span class="operator">-&gt;</span>head <span class="operator">+</span> array<span class="operator">-&gt;</span>size<span class="punctuation">)</span> <span class="operator">=</span> value<span class="punctuation">;</span>
    array<span class="operator">-&gt;</span>size<span class="operator">++</span><span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">void</span> <span class="function">delete</span><span class="punctuation">(</span>dynamic_array <span class="operator">*</span>array<span class="punctuation">)</span>
<span class="punctuation">{</span>
    <span class="keyword">if</span> <span class="punctuation">(</span>array<span class="operator">-&gt;</span>size <span class="operator">==</span> <span class="number">0</span><span class="punctuation">)</span>
        <span class="keyword">return</span><span class="punctuation">;</span>
    <span class="keyword">if</span> <span class="punctuation">(</span>array<span class="operator">-&gt;</span>size <span class="operator">*</span> <span class="number">4</span> <span class="operator">&lt;</span> array<span class="operator">-&gt;</span>capacity<span class="punctuation">)</span>
        <span class="function">resize</span><span class="punctuation">(</span>array<span class="punctuation">,</span> array<span class="operator">-&gt;</span>capacity <span class="operator">/</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">;</span>

    array<span class="operator">-&gt;</span>size<span class="operator">--</span><span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">int</span> <span class="function">get</span><span class="punctuation">(</span>dynamic_array array<span class="punctuation">,</span> <span class="builtin">int</span> index<span class="punctuation">)</span>
<span class="punctuation">{</span>
    <span class="keyword">return</span> <span class="operator">*</span><span class="punctuation">(</span>array<span class="punctuation">.</span>head <span class="operator">+</span> index<span class="punctuation">)</span><span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="builtin">void</span> <span class="function">set</span><span class="punctuation">(</span>dynamic_array <span class="operator">*</span>array<span class="punctuation">,</span> <span class="builtin">int</span> index<span class="punctuation">,</span> T value<span class="punctuation">)</span>
<span class="punctuation">{</span>
    <span class="operator">*</span><span class="punctuation">(</span>array<span class="operator">-&gt;</span>head <span class="operator">+</span> index<span class="punctuation">)</span> <span class="operator">=</span> value<span class="punctuation">;</span>
<span class="punctuation">}</span>5:T419,typedef int T;

typedef struct dynamic_array
{
    T *head;
    int size;
    int capacity;
} dynamic_array;

dynamic_array constructor(int capacity)
{
    dynamic_array array;
    array.size = 0;
    array.capacity = capacity;
    array.head = calloc(capacity, sizeof(T));

    return array;
}

void destructor(dynamic_array *array)
{
    free(array->head);
}

void resize(dynamic_array *array, int capacity)
{
    array->head = realloc(array->head, sizeof(T));
    array->capacity = capacity;
}

void append(dynamic_array *array, T value)
{
    if (array->size == array->capacity)
        resize(array, array->capacity * 2);

    *(array->head + array->size) = value;
    array->size++;
}

void delete(dynamic_array *array)
{
    if (array->size == 0)
        return;
    if (array->size * 4 < array->capacity)
        resize(array, array->capacity / 2);

    array->size--;
}

int get(dynamic_array array, int index)
{
    return *(array.head + index);
}

void set(dynamic_array *array, int index, T value)
{
    *(array->head + index) = value;
}8:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
9:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
a:{"display":"inline-block"}
b:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["OVDfjCgqjH7xCkuFKsDQs",[[["",{"children":["(notes)",{"children":["data-structures",{"children":["skip-list",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(notes)",{"children":["data-structures",{"children":["skip-list",{"children":["__PAGE__",{},[["$L1",[["$","div",null,{"className":"title","children":["$","h1",null,{"children":"Список с пропусками"}]}],["$","div",null,{"className":"par","children":["$","p",null,{"children":"Список с пропусками (skip list) – структура данных, состоящая из узлов, содержащих помимо данных ссылку на следующий и/или предыдущий узел."}]}],["$","div",null,{"className":"image","children":["$","$L2",null,{"src":"/_next/static/media/skip-list.9eb32bec.svg","width":644,"height":162,"alt":"$undefined"}]}],["$","section",null,{"children":[["$","h1",null,{"children":"$undefined"}],["$","div",null,{"className":"codeblock","children":[["$","code",null,{"className":"language-c","dangerouslySetInnerHTML":{"__html":"$3"}}],["$","$L4",null,{"text":"$5"}]]}]]}]],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5bdf5dcd9043da1a.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/cffc39addae3f57c.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b1ef9917c41239b8.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/fe2eed3e70b09d81.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/5ab5e3ef6d7c504c.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","5",{"rel":"stylesheet","href":"/_next/static/css/66e2015fe6c63f65.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","6",{"rel":"stylesheet","href":"/_next/static/css/3489bc9f8c699f88.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","7",{"rel":"stylesheet","href":"/_next/static/css/224c6de4cde30e73.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(notes)","children","data-structures","children","skip-list","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(notes)","children","data-structures","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a519598dee6f2717.css","precedence":"next","crossOrigin":"$undefined"}]],[["$","article",null,{"children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(notes)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}],["$","div",null,{"style":{"height":"5rem"}}]]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8a0af8f496d32450.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ru","children":["$","body",null,{"className":"__variable_8aafdc __variable_c80cc2","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$8","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$9","children":"404"}],["$","div",null,{"style":"$a","children":["$","h2",null,{"style":"$b","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]}]],null],null],["$Lc",null]]]]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Список с пропусками"}],["$","meta","3",{"name":"description","content":"..."}],["$","link","4",{"rel":"icon","href":"/icon.svg?3bdfcaa020873225","type":"image/svg+xml","sizes":"any"}]]
1:null
