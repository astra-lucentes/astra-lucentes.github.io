2:I[6330,["5501","static/chunks/c16f53c3-263c4e379e12b9c7.js","7096","static/chunks/7096-6d1c431b58ffd388.js","5878","static/chunks/5878-f84dc20828bf89ac.js","4546","static/chunks/4546-a0bc759f73c94409.js","2010","static/chunks/app/(notes)/sorting/merge/page-08eed6e1f9c8fb5b.js"],"Slider"]
3:I[5878,["5501","static/chunks/c16f53c3-263c4e379e12b9c7.js","7096","static/chunks/7096-6d1c431b58ffd388.js","5878","static/chunks/5878-f84dc20828bf89ac.js","4546","static/chunks/4546-a0bc759f73c94409.js","2010","static/chunks/app/(notes)/sorting/merge/page-08eed6e1f9c8fb5b.js"],"Image"]
5:I[3474,["5501","static/chunks/c16f53c3-263c4e379e12b9c7.js","7096","static/chunks/7096-6d1c431b58ffd388.js","5878","static/chunks/5878-f84dc20828bf89ac.js","4546","static/chunks/4546-a0bc759f73c94409.js","2010","static/chunks/app/(notes)/sorting/merge/page-08eed6e1f9c8fb5b.js"],"default"]
8:I[1154,["5501","static/chunks/c16f53c3-263c4e379e12b9c7.js","7096","static/chunks/7096-6d1c431b58ffd388.js","5878","static/chunks/5878-f84dc20828bf89ac.js","4546","static/chunks/4546-a0bc759f73c94409.js","2010","static/chunks/app/(notes)/sorting/merge/page-08eed6e1f9c8fb5b.js"],"Tabs"]
9:I[1154,["5501","static/chunks/c16f53c3-263c4e379e12b9c7.js","7096","static/chunks/7096-6d1c431b58ffd388.js","5878","static/chunks/5878-f84dc20828bf89ac.js","4546","static/chunks/4546-a0bc759f73c94409.js","2010","static/chunks/app/(notes)/sorting/merge/page-08eed6e1f9c8fb5b.js"],"Tab"]
c:I[4707,[],""]
d:I[6423,[],""]
e:I[2972,["2972","static/chunks/2972-46c398a3f3c253df.js","6942","static/chunks/app/(notes)/layout-5e3a5ea0592c52ee.js"],""]
4:T766,<span class="keyword">function</span> <span class="function">merge_sort</span><span class="punctuation">(</span><span class="abstract-type">list</span> a<span class="punctuation">)</span><span class="punctuation">:</span>
    <span class="keyword">if</span> length of a <span class="operator">&lt;=</span> <span class="number">1</span><span class="punctuation">:</span>
        <span class="keyword">return</span> a
    
    left <span class="operator">=</span> right <span class="operator">=</span> <span class="punctuation">[</span><span class="punctuation">]</span>

    <span class="keyword">for</span> <span class="keyword">each</span> x <span class="keyword">with</span> index i <span class="keyword">in</span> a<span class="punctuation">:</span>
        <span class="keyword">if</span> i <span class="operator">&lt;</span> <span class="punctuation">(</span>length of a<span class="punctuation">)</span> <span class="operator">/</span> <span class="number">2</span><span class="punctuation">:</span>
            left<span class="punctuation">.</span><span class="function">append</span><span class="punctuation">(</span>x<span class="punctuation">)</span>
        <span class="keyword">else</span><span class="punctuation">:</span>
            right<span class="punctuation">.</span><span class="function">append</span><span class="punctuation">(</span>x<span class="punctuation">)</span>

    left <span class="operator">=</span> <span class="function">merge_sort</span><span class="punctuation">(</span>left<span class="punctuation">)</span>
    right <span class="operator">=</span> <span class="function">merge_sort</span><span class="punctuation">(</span>right<span class="punctuation">)</span>

    <span class="keyword">return</span> <span class="function">merge</span><span class="punctuation">(</span>left<span class="punctuation">,</span> right<span class="punctuation">)</span>6:Ta06,<span class="keyword">function</span> <span class="function">merge</span><span class="punctuation">(</span><span class="abstract-type">list</span> left<span class="punctuation">,</span> <span class="abstract-type">list</span> right<span class="punctuation">)</span><span class="punctuation">:</span>
    result <span class="operator">=</span> <span class="punctuation">[</span><span class="punctuation">]</span>
    i <span class="operator">=</span> j <span class="operator">=</span> <span class="number">0</span>

    <span class="keyword">while</span> i <span class="operator">&lt;</span> length of left <span class="keyword">and</span> j <span class="operator">&lt;</span> length of right<span class="punctuation">:</span>
        <span class="keyword">if</span> left<span class="punctuation">[</span>i<span class="punctuation">]</span> <span class="operator">&lt;=</span> right<span class="punctuation">[</span>j<span class="punctuation">]</span><span class="punctuation">:</span>
            result<span class="punctuation">.</span><span class="function">append</span><span class="punctuation">(</span>left<span class="punctuation">[</span>i<span class="punctuation">]</span><span class="punctuation">)</span>
            i<span class="operator">+</span><span class="operator">+</span>
        <span class="keyword">else</span><span class="punctuation">:</span>
            result<span class="punctuation">.</span><span class="function">append</span><span class="punctuation">(</span>right<span class="punctuation">[</span>j<span class="punctuation">]</span><span class="punctuation">)</span>
            j<span class="operator">+</span><span class="operator">+</span>

    <span class="keyword">for</span> k <span class="operator">=</span> i<span class="punctuation">,</span> left <span class="operator">&lt;</span> length of left<span class="punctuation">:</span>
        result<span class="punctuation">.</span><span class="function">append</span><span class="punctuation">(</span>left<span class="punctuation">[</span>k<span class="punctuation">]</span><span class="punctuation">)</span>

    <span class="keyword">for</span> k <span class="operator">=</span> j<span class="punctuation">,</span> k <span class="operator">&lt;</span> length of right<span class="punctuation">:</span>
        result<span class="punctuation">.</span><span class="function">append</span><span class="punctuation">(</span>right<span class="punctuation">[</span>k<span class="punctuation">]</span><span class="punctuation">)</span>

    <span class="keyword">return</span> result7:T800,<span class="keyword">function</span> <span class="function">merge_sort</span><span class="punctuation">(</span><span class="abstract-type">list</span> a<span class="punctuation">)</span><span class="punctuation">:</span>
    <span class="keyword">if</span> length of a <span class="operator">&lt;=</span> <span class="number">1</span><span class="punctuation">:</span>
        <span class="keyword">return</span> a
    
    left <span class="operator">=</span> right <span class="operator">=</span> <span class="punctuation">[</span><span class="punctuation">]</span>

    <span class="keyword">for</span> <span class="keyword">each</span> x <span class="keyword">with</span> index i <span class="keyword">in</span> a<span class="punctuation">:</span>
        <span class="keyword">if</span> i <span class="operator">&lt;</span> <span class="punctuation">(</span>length of a<span class="punctuation">)</span> <span class="operator">/</span> <span class="number">2</span><span class="punctuation">:</span>
            left<span class="punctuation">.</span><span class="function">append</span><span class="punctuation">(</span>x<span class="punctuation">)</span>
        <span class="keyword">else</span><span class="punctuation">:</span>
            right<span class="punctuation">.</span><span class="function">append</span><span class="punctuation">(</span>x<span class="punctuation">)</span>
    
    <span class="keyword">gather</span><span class="punctuation">:</span>
        left <span class="operator">=</span> <span class="keyword">fork</span> <span class="function">merge_sort</span><span class="punctuation">(</span>left<span class="punctuation">)</span>
        right <span class="operator">=</span> <span class="keyword">fork</span> <span class="function">merge_sort</span><span class="punctuation">(</span>right<span class="punctuation">)</span>

    <span class="keyword">return</span> <span class="function">merge</span><span class="punctuation">(</span>left<span class="punctuation">,</span> right<span class="punctuation">)</span>a:Tf3e,<span class="keyword">def</span> <span class="function">merge</span><span class="punctuation">(</span>a<span class="punctuation">:</span> <span class="builtin">list</span><span class="punctuation">,</span> b<span class="punctuation">:</span> <span class="builtin">list</span><span class="punctuation">)</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="builtin">list</span><span class="punctuation">:</span>
    result <span class="operator">=</span> <span class="punctuation">[</span><span class="punctuation">]</span>
    i <span class="operator">=</span> j <span class="operator">=</span> <span class="number">0</span>

    <span class="keyword">while</span> i <span class="operator">&lt;</span> <span class="builtin">len</span><span class="punctuation">(</span>a<span class="punctuation">)</span> <span class="keyword">and</span> j <span class="operator">&lt;</span> <span class="builtin">len</span><span class="punctuation">(</span>b<span class="punctuation">)</span><span class="punctuation">:</span>
        <span class="keyword">if</span> a<span class="punctuation">[</span>i<span class="punctuation">]</span> <span class="operator">&lt;=</span> b<span class="punctuation">[</span>j<span class="punctuation">]</span><span class="punctuation">:</span>
            result<span class="punctuation">.</span>append<span class="punctuation">(</span>a<span class="punctuation">[</span>i<span class="punctuation">]</span><span class="punctuation">)</span>
            i <span class="operator">+=</span> <span class="number">1</span>
        <span class="keyword">else</span><span class="punctuation">:</span>
            result<span class="punctuation">.</span>append<span class="punctuation">(</span>b<span class="punctuation">[</span>j<span class="punctuation">]</span><span class="punctuation">)</span>
            j <span class="operator">+=</span> <span class="number">1</span>

    result<span class="punctuation">.</span>extend<span class="punctuation">(</span>a<span class="punctuation">[</span>i<span class="punctuation">:</span><span class="punctuation">]</span><span class="punctuation">)</span>
    result<span class="punctuation">.</span>extend<span class="punctuation">(</span>b<span class="punctuation">[</span>j<span class="punctuation">:</span><span class="punctuation">]</span><span class="punctuation">)</span>

    <span class="keyword">return</span> result


<span class="keyword">def</span> <span class="function">merge_sort</span><span class="punctuation">(</span>a<span class="punctuation">:</span> <span class="builtin">list</span><span class="punctuation">)</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="builtin">list</span><span class="punctuation">:</span>
    <span class="keyword">if</span> <span class="builtin">len</span><span class="punctuation">(</span>a<span class="punctuation">)</span> <span class="operator">&lt;=</span> <span class="number">1</span><span class="punctuation">:</span>
        <span class="keyword">return</span> a

    <span class="keyword">return</span> merge<span class="punctuation">(</span>
        merge_sort<span class="punctuation">(</span>a<span class="punctuation">[</span><span class="punctuation">:</span><span class="builtin">len</span><span class="punctuation">(</span>a<span class="punctuation">)</span><span class="operator">//</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">)</span><span class="punctuation">,</span>
        merge_sort<span class="punctuation">(</span>a<span class="punctuation">[</span><span class="builtin">len</span><span class="punctuation">(</span>a<span class="punctuation">)</span><span class="operator">//</span><span class="number">2</span><span class="punctuation">:</span><span class="punctuation">]</span><span class="punctuation">)</span>
    <span class="punctuation">)</span>b:T1c30,<span class="keyword">typedef</span> <span class="builtin">int</span> T<span class="punctuation">;</span>

<span class="builtin">void</span> <span class="function">merge</span><span class="punctuation">(</span>T array<span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="builtin">int</span> left<span class="punctuation">,</span> <span class="builtin">int</span> mid<span class="punctuation">,</span> <span class="builtin">int</span> right<span class="punctuation">)</span>
<span class="punctuation">{</span>
    <span class="builtin">int</span> len_a <span class="operator">=</span> mid <span class="operator">-</span> left <span class="operator">+</span> <span class="number">1</span><span class="punctuation">;</span>
    <span class="builtin">int</span> len_b <span class="operator">=</span> right <span class="operator">-</span> mid<span class="punctuation">;</span>

    T a<span class="punctuation">[</span>len_a<span class="punctuation">]</span><span class="punctuation">,</span> b<span class="punctuation">[</span>len_b<span class="punctuation">]</span><span class="punctuation">;</span>

    <span class="keyword">for</span> <span class="punctuation">(</span><span class="builtin">int</span> i <span class="operator">=</span> <span class="number">0</span><span class="punctuation">;</span> i <span class="operator">&lt;</span> len_a<span class="punctuation">;</span> i<span class="operator">++</span><span class="punctuation">)</span>
        a<span class="punctuation">[</span>i<span class="punctuation">]</span> <span class="operator">=</span> array<span class="punctuation">[</span>left <span class="operator">+</span> i<span class="punctuation">]</span><span class="punctuation">;</span>
    
    <span class="keyword">for</span> <span class="punctuation">(</span><span class="builtin">int</span> i <span class="operator">=</span> <span class="number">0</span><span class="punctuation">;</span> i <span class="operator">&lt;</span> len_b<span class="punctuation">;</span> i<span class="operator">++</span><span class="punctuation">)</span>
        b<span class="punctuation">[</span>i<span class="punctuation">]</span> <span class="operator">=</span> array<span class="punctuation">[</span>mid <span class="operator">+</span> <span class="number">1</span> <span class="operator">+</span> i<span class="punctuation">]</span><span class="punctuation">;</span>

    <span class="builtin">int</span> i <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> j <span class="operator">=</span> <span class="number">0</span><span class="punctuation">;</span>
    <span class="builtin">int</span> k <span class="operator">=</span> left<span class="punctuation">;</span>

    <span class="keyword">while</span> <span class="punctuation">(</span>i <span class="operator">&lt;</span> len_a <span class="operator">&amp;&amp;</span> j <span class="operator">&lt;</span> len_b<span class="punctuation">)</span> <span class="punctuation">{</span>
        <span class="keyword">if</span> <span class="punctuation">(</span>a<span class="punctuation">[</span>i<span class="punctuation">]</span> <span class="operator">&lt;=</span> b<span class="punctuation">[</span>j<span class="punctuation">]</span><span class="punctuation">)</span> <span class="punctuation">{</span>
            array<span class="punctuation">[</span>k<span class="punctuation">]</span> <span class="operator">=</span> a<span class="punctuation">[</span>i<span class="punctuation">]</span><span class="punctuation">;</span>
            i<span class="operator">++</span><span class="punctuation">;</span>
        <span class="punctuation">}</span> <span class="keyword">else</span> <span class="punctuation">{</span>
            array<span class="punctuation">[</span>k<span class="punctuation">]</span> <span class="operator">=</span> b<span class="punctuation">[</span>j<span class="punctuation">]</span><span class="punctuation">;</span>
            j<span class="operator">++</span><span class="punctuation">;</span>
        <span class="punctuation">}</span>
        k<span class="operator">++</span><span class="punctuation">;</span>
    <span class="punctuation">}</span>

    <span class="keyword">while</span> <span class="punctuation">(</span>i <span class="operator">&lt;</span> len_a<span class="punctuation">)</span> <span class="punctuation">{</span>
        array<span class="punctuation">[</span>k<span class="punctuation">]</span> <span class="operator">=</span> a<span class="punctuation">[</span>i<span class="punctuation">]</span><span class="punctuation">;</span>
        i<span class="operator">++</span><span class="punctuation">;</span>
        k<span class="operator">++</span><span class="punctuation">;</span>
    <span class="punctuation">}</span>

    <span class="keyword">while</span> <span class="punctuation">(</span>j <span class="operator">&lt;</span> len_b<span class="punctuation">)</span> <span class="punctuation">{</span>
        array<span class="punctuation">[</span>k<span class="punctuation">]</span> <span class="operator">=</span> b<span class="punctuation">[</span>j<span class="punctuation">]</span><span class="punctuation">;</span>
        j<span class="operator">++</span><span class="punctuation">;</span>
        k<span class="operator">++</span><span class="punctuation">;</span>
    <span class="punctuation">}</span>
<span class="punctuation">}</span>

<span class="builtin">void</span> <span class="function">merge_sort</span><span class="punctuation">(</span>T array<span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="builtin">int</span> left<span class="punctuation">,</span> <span class="builtin">int</span> right<span class="punctuation">)</span> <span class="punctuation">{</span>
    <span class="keyword">if</span> <span class="punctuation">(</span>left <span class="operator">&lt;</span> right<span class="punctuation">)</span> <span class="punctuation">{</span>
        <span class="builtin">int</span> mid <span class="operator">=</span> <span class="punctuation">(</span>right <span class="operator">+</span> left<span class="punctuation">)</span> <span class="operator">/</span> <span class="number">2</span><span class="punctuation">;</span>

        <span class="function">merge_sort</span><span class="punctuation">(</span>array<span class="punctuation">,</span> left<span class="punctuation">,</span> mid<span class="punctuation">)</span><span class="punctuation">;</span>
        <span class="function">merge_sort</span><span class="punctuation">(</span>array<span class="punctuation">,</span> mid <span class="operator">+</span> <span class="number">1</span><span class="punctuation">,</span> right<span class="punctuation">)</span><span class="punctuation">;</span>

        <span class="function">merge</span><span class="punctuation">(</span>array<span class="punctuation">,</span> left<span class="punctuation">,</span> mid<span class="punctuation">,</span> right<span class="punctuation">)</span><span class="punctuation">;</span>
    <span class="punctuation">}</span>
<span class="punctuation">}</span>0:["apL9GHZTvXe_rwdZHcL4n",[[["",{"children":["(notes)",{"children":["sorting",{"children":["merge",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(notes)",{"children":["sorting",{"children":["merge",{"children":["__PAGE__",{},[["$L1",[["$","div",null,{"className":"title","children":["$","h1",null,{"children":"Сортировка слиянием"}]}],["$","section",null,{"children":[["$","div",null,{"className":"par","children":["$","p",null,{"children":["Сортировка слиянием (Merge sort) – устойчивая сортировка, работающая за ",["$","span",null,{"className":"math","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Theta(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Θ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>"}}]," времени. Работает на любых структурах данных последовательного доступа."]}]}],["$","div",null,{"className":"par","children":["$","p",null,{"children":"Основная идея алгоритма – разделить список на две части, отсортировать эти части отдельно этим же алгоритмом, а потом соединить их в один отсортированный список. Такая процедура соединения называется процедурой слияния."}]}],["$","$L2",null,{"autoplay":true,"children":[["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-1.9fd47604.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-2.d3e715bf.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-3.ce5a5517.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-4.89b414f9.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-5.2f0519bf.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-6.3211e7ec.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-7.9ca5d4c8.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-8.fe05bc5e.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-9.8f3476b2.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-10.5efa3d25.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-11.b28105cf.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-12.0e93bfda.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-13.038a6ce7.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-14.c6ea511d.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-15.a5b453d9.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-16.c6244b83.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-17.7e47548b.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-18.032bb49d.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-19.1ddb00b2.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-20.0f51f857.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-21.4d5f9893.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-22.34ed6cf4.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-23.a52971ea.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-24.a5912371.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-25.6ed229e1.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-26.de412025.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-27.c6034e73.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-28.3488ebef.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-29.4f4d862b.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-30.201a0f49.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-31.65864f93.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}],["$","div",null,{"className":"image","children":["$","$L3",null,{"src":"/_next/static/media/example-32.ca84ec0e.svg","width":320,"height":190,"alt":"Пример алгоритма слияния"}]}]]}],["$","div",null,{"className":"codeblock","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"$4"}}],["$","$L5",null,{"text":"function merge_sort(list a):\n    if length of a <= 1:\n        return a\n    \n    left = right = []\n\n    for each x with index i in a:\n        if i < (length of a) / 2:\n            left.append(x)\n        else:\n            right.append(x)\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)"}]]}],["$","h2",null,{"children":"Слияние"}],["$","div",null,{"className":"par","children":[["$","p",null,{"children":["Пусть есть два отсортированных списка ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"a"}}],false]}]," и"," ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"b"}}],false]}],". Надо превратить эти два списка в один отсортированный список ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"c"}}],false]}],". Эту задачу решает процедура слияния."]}],["$","p",null,{"children":["Мы сравниваем первые (наименьшие) элементы списков ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"a"}}],false]}]," и"," ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"b"}}],false]}],", забираем меньший и добавляем его в список"," ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"c"}}],false]}],". Проделываем эту операцию, пока элементы в каком-то из списков не закончатся. Затем дописываем в ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"c"}}],false]}]," все оставшиеся элементы непустого списка."]}]]}],["$","div",null,{"className":"codeblock","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"$6"}}],["$","$L5",null,{"text":"function merge(list left, list right):\n    result = []\n    i = j = 0\n\n    while i < length of left and j < length of right:\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i++\n        else:\n            result.append(right[j])\n            j++\n\n    for k = i, left < length of left:\n        result.append(left[k])\n\n    for k = j, k < length of right:\n        result.append(right[k])\n\n    return result"}]]}]]}],["$","section",null,{"children":[["$","h1",null,{"children":"Распараллеливание"}],["$","div",null,{"className":"codeblock","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"$7"}}],["$","$L5",null,{"text":"function merge_sort(list a):\n    if length of a <= 1:\n        return a\n    \n    left = right = []\n\n    for each x with index i in a:\n        if i < (length of a) / 2:\n            left.append(x)\n        else:\n            right.append(x)\n    \n    gather:\n        left = fork merge_sort(left)\n        right = fork merge_sort(right)\n\n    return merge(left, right)"}]]}]]}],["$","section",null,{"children":[["$","h1",null,{"children":"Реализация"}],["$","$L8",null,{"children":[["$","$L9",null,{"title":[["$","svg",null,{"className":"icon","viewBox":"0 0 48 48","xmlns":"http://www.w3.org/2000/svg","style":{"color":"$undefined","height":"1.5rem","width":"1.5rem"},"children":[["$","path",null,{"d":"M24.5099 4.00008C22.8731 4.00534 21.7384 4.14955 20.3668 4.38639C16.3163 5.09166 15.5784 6.57271 15.5784 9.30218V13.4738H25.052V15.579H15.2184H10.6394C7.86468 15.579 5.43626 16.8864 4.66679 20.0201C3.79732 23.6169 3.75837 25.8695 4.66679 29.6253C5.35626 32.4264 6.87521 34.5264 9.651 34.5264H13.4741V29.1537C13.4741 26.0316 16.3015 22.9474 19.5415 22.9474H27.1583C29.8141 22.9474 32.4215 20.9874 32.4215 18.3401V9.30218C32.4215 6.73481 30.5699 4.81481 27.9815 4.38429C28.0457 4.37797 26.1331 3.99376 24.5099 4.00008ZM19.2636 8.2106C20.1278 8.2106 20.8426 8.92323 20.8426 9.79165C20.8426 10.6685 20.1278 11.3685 19.2636 11.3685C18.3826 11.3685 17.6847 10.6695 17.6847 9.79165C17.6847 8.92639 18.3826 8.2106 19.2636 8.2106Z","fill":"#0277BD"}],["$","path",null,{"d":"M23.4899 44C25.1268 43.9948 26.2615 43.8506 27.6331 43.6137C31.6836 42.9085 32.4215 41.4274 32.4215 38.6979V34.5264H22.9478V32.4211H32.7825H37.3615C40.1362 32.4211 42.5646 31.1137 43.3341 27.9801C44.2036 24.3832 44.2425 22.1306 43.3341 18.3748C42.6436 15.5738 41.1246 13.4738 38.3489 13.4738H34.5257V18.8464C34.5257 21.9685 31.6983 25.0527 28.4583 25.0527H20.8415C18.1857 25.0527 15.5783 27.0127 15.5783 29.6601V38.6979C15.5783 41.2653 17.4299 43.1853 20.0183 43.6158C19.9541 43.6222 21.8668 44.0064 23.4899 44ZM28.7373 39.7895C27.8731 39.7895 27.1583 39.0769 27.1583 38.2085C27.1583 37.3316 27.8731 36.6316 28.7373 36.6316C29.6183 36.6316 30.3162 37.3306 30.3162 38.2085C30.3162 39.0737 29.6173 39.7895 28.7373 39.7895Z","fill":"#FFC107"}]]}],"Python"],"children":["$","div",null,{"className":"codeblock","children":[["$","code",null,{"className":"language-python","dangerouslySetInnerHTML":{"__html":"$a"}}],["$","$L5",null,{"text":"def merge(a: list, b: list) -> list:\n    result = []\n    i = j = 0\n\n    while i < len(a) and j < len(b):\n        if a[i] <= b[j]:\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n\n    result.extend(a[i:])\n    result.extend(b[j:])\n\n    return result\n\n\ndef merge_sort(a: list) -> list:\n    if len(a) <= 1:\n        return a\n\n    return merge(\n        merge_sort(a[:len(a)//2]),\n        merge_sort(a[len(a)//2:])\n    )"}]]}]}],["$","$L9",null,{"title":[["$","svg",null,{"className":"icon","viewBox":"0 0 48 48","xmlns":"http://www.w3.org/2000/svg","style":{"color":"$undefined","height":"1.5rem","width":"1.5rem"},"children":[["$","path",null,{"d":"M22.9607 4.27215C23.604 3.90928 24.396 3.90928 25.0383 4.27215C28.2167 6.0655 37.7814 11.4637 40.9607 13.257C41.604 13.6189 42 14.2894 42 15.0151C42 18.6018 42 29.3972 42 32.9839C42 33.7096 41.604 34.3801 40.9607 34.743C37.7823 36.5363 28.2177 41.9345 25.0383 43.7279C24.3951 44.0907 23.6031 44.0907 22.9607 43.7279C19.7823 41.9345 10.2177 36.5363 7.03832 34.743C6.396 34.3801 6 33.7106 6 32.9849C6 29.3982 6 18.6028 6 15.0161C6 14.2904 6.396 13.6199 7.03926 13.257C10.2167 11.4637 19.7833 6.0655 22.9607 4.27215Z","fill":"#6972DF"}],["$","path",null,{"d":"M34.2107 29.8579C34.9249 30.2725 35.1763 31.1925 34.687 31.8577C33.2737 33.7789 31.3622 35.287 29.149 36.2087C26.4758 37.3219 23.5119 37.5173 20.717 36.7646C17.9221 36.0119 15.4523 34.3531 13.6906 32.0455C11.929 29.7379 10.974 26.9105 10.9737 24.0016C10.9734 21.0928 11.9278 18.2651 13.689 15.9572C15.4501 13.6492 17.9196 11.9899 20.7143 11.2366C23.5091 10.4833 26.473 10.6781 29.1465 11.7908C31.3598 12.712 33.2716 14.2196 34.6854 16.1406C35.1749 16.8057 34.9236 17.7258 34.2095 18.1404L31.1127 19.9387C30.394 20.3561 29.4833 20.0937 28.917 19.4854C28.2808 18.802 27.5033 18.2579 26.6325 17.8955C25.2957 17.3392 23.8138 17.2418 22.4164 17.6184C21.019 17.9951 19.7843 18.8247 18.9037 19.9787C18.0231 21.1327 17.5459 22.5465 17.5461 24.0009C17.5462 25.4554 18.0237 26.8691 18.9045 28.0229C19.7854 29.1767 21.0202 30.0061 22.4177 30.3824C23.8152 30.7588 25.2971 30.6611 26.6337 30.1045C27.5045 29.7418 28.2819 29.1977 28.918 28.5141C29.4842 27.9057 30.3947 27.6431 31.1135 28.0603L34.2107 29.8579Z","fill":"white"}]]}],"C за ",["$","span",null,{"className":"math","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>"}}]," памяти"],"children":["$","div",null,{"className":"codeblock","children":[["$","code",null,{"className":"language-c","dangerouslySetInnerHTML":{"__html":"$b"}}],["$","$L5",null,{"text":"typedef int T;\n\nvoid merge(T array[], int left, int mid, int right)\n{\n    int len_a = mid - left + 1;\n    int len_b = right - mid;\n\n    T a[len_a], b[len_b];\n\n    for (int i = 0; i < len_a; i++)\n        a[i] = array[left + i];\n    \n    for (int i = 0; i < len_b; i++)\n        b[i] = array[mid + 1 + i];\n\n    int i = 0, j = 0;\n    int k = left;\n\n    while (i < len_a && j < len_b) {\n        if (a[i] <= b[j]) {\n            array[k] = a[i];\n            i++;\n        } else {\n            array[k] = b[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < len_a) {\n        array[k] = a[i];\n        i++;\n        k++;\n    }\n\n    while (j < len_b) {\n        array[k] = b[j];\n        j++;\n        k++;\n    }\n}\n\nvoid merge_sort(T array[], int left, int right) {\n    if (left < right) {\n        int mid = (right + left) / 2;\n\n        merge_sort(array, left, mid);\n        merge_sort(array, mid + 1, right);\n\n        merge(array, left, mid, right);\n    }\n}"}]]}]}]]}]]}]],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c7d54b6fa11d1a10.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/26add30ef067d5ef.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/fe2eed3e70b09d81.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/cb1458b54209591a.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/a85cc6ffb2e23bf0.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","5",{"rel":"stylesheet","href":"/_next/static/css/224c6de4cde30e73.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","6",{"rel":"stylesheet","href":"/_next/static/css/bda1b9f8abd40675.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","7",{"rel":"stylesheet","href":"/_next/static/css/8a143d68bf994543.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","8",{"rel":"stylesheet","href":"/_next/static/css/e1fa1c63977e8d7a.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$Lc",null,{"parallelRouterKey":"children","segmentPath":["children","(notes)","children","sorting","children","merge","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Ld",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$Lc",null,{"parallelRouterKey":"children","segmentPath":["children","(notes)","children","sorting","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Ld",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/07ddf3913eec176a.css","precedence":"next","crossOrigin":"$undefined"}]],[["$","article",null,{"children":["$","$Lc",null,{"parallelRouterKey":"children","segmentPath":["children","(notes)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Ld",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]}],["$","div",null,{"style":{"height":"5rem"}}]]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0ae8bd05a52ca320.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ru","children":["$","body",null,{"className":"__variable_8aafdc __variable_42bd1a","children":[["$","header",null,{"children":[["$","img",null,{"src":"/icon.svg","alt":"","role":"presentation"}],["$","nav",null,{"children":[["$","$Le",null,{"className":"colorless","href":"/","children":"Главная"}],["$","$Le",null,{"className":"colorless","href":"/tasks","children":"Задачи"}]]}]]}],["$","$Lc",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Ld",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"error404","children":[["$","h1",null,{"children":[["$","span",null,{"children":"4"}],["$","span",null,{"children":"0"}],["$","span",null,{"children":"4"}]]}],"Без паники! Вы просто попали на несуществующую страницу."]}],"notFoundStyles":[]}]]}]}]],null],null],["$Lf",null]]]]
f:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Сортировка слиянием"}],["$","meta","3",{"name":"description","content":"..."}],["$","link","4",{"rel":"icon","href":"/icon.svg?3bdfcaa020873225","type":"image/svg+xml","sizes":"any"}]]
1:null
