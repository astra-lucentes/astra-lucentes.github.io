2:I[1154,["5501","static/chunks/c16f53c3-263c4e379e12b9c7.js","7096","static/chunks/7096-6d1c431b58ffd388.js","7697","static/chunks/7697-a9e99139fee52f50.js","6964","static/chunks/app/tasks/(bst)/implement-avl/page-a5cd81c9a803f975.js"],"Tabs"]
3:I[1154,["5501","static/chunks/c16f53c3-263c4e379e12b9c7.js","7096","static/chunks/7096-6d1c431b58ffd388.js","7697","static/chunks/7697-a9e99139fee52f50.js","6964","static/chunks/app/tasks/(bst)/implement-avl/page-a5cd81c9a803f975.js"],"Tab"]
5:I[3474,["5501","static/chunks/c16f53c3-263c4e379e12b9c7.js","7096","static/chunks/7096-6d1c431b58ffd388.js","7697","static/chunks/7697-a9e99139fee52f50.js","6964","static/chunks/app/tasks/(bst)/implement-avl/page-a5cd81c9a803f975.js"],"default"]
6:I[4707,[],""]
7:I[6423,[],""]
8:I[2972,["5501","static/chunks/c16f53c3-263c4e379e12b9c7.js","7096","static/chunks/7096-6d1c431b58ffd388.js","2972","static/chunks/2972-46c398a3f3c253df.js","7289","static/chunks/app/tasks/page-478ac591261129ba.js"],""]
4:Tf66,<span class="keyword">class</span> <span class="class-name">node</span><span class="punctuation">:</span>
    <span class="builtin">int</span> value
    <span class="class-name">node</span> left
    <span class="class-name">node</span> right
    
    
<span class="keyword">class</span> AVLTree<span class="punctuation">:</span>
    <span class="class-name">node</span> root

    <span class="keyword">constructor</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">)</span><span class="punctuation">:</span>
        создать пустое дерево
    
    <span class="keyword">method</span> <span class="function">add</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">,</span> <span class="builtin">int</span> x<span class="punctuation">)</span><span class="punctuation">:</span>
        добавить число x в дерево
        
    <span class="keyword">method</span> <span class="function">remove</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">,</span> <span class="builtin">int</span> x<span class="punctuation">)</span><span class="punctuation">:</span>
        удалить число x из дерева
        
    <span class="keyword">method</span> <span class="function">find</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">,</span> <span class="builtin">int</span> x<span class="punctuation">)</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="builtin">bool</span><span class="punctuation">:</span>
        <span class="keyword">return</span> есть ли число x в дереве<span class="punctuation">?</span>
        
    <span class="keyword">method</span> <span class="function">find_next</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">,</span> <span class="builtin">int</span> x<span class="punctuation">)</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="builtin">int</span><span class="punctuation">:</span>
        <span class="keyword">return</span> следующее за x число в дереве
        
    <span class="keyword">method</span> <span class="function">find_prev</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">,</span> <span class="builtin">int</span> x<span class="punctuation">)</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="builtin">int</span><span class="punctuation">:</span>
        <span class="keyword">return</span> предшествующее x число в дереве
        
    <span class="keyword">method</span> <span class="function">min</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">)</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="builtin">int</span><span class="punctuation">:</span>
        <span class="keyword">return</span> минимальное число в дереве
        
    <span class="keyword">method</span> <span class="function">max</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">)</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="builtin">int</span><span class="punctuation">:</span>
        <span class="keyword">return</span> максимальное число в дереве
        
    <span class="keyword">iterator</span> <span class="function">inorder</span><span class="punctuation">(</span><span class="soft-keyword">self</span><span class="punctuation">)</span><span class="punctuation">:</span>
        пройтись по всем ключам по порядку0:["2pC1pQ0K06ML0mVqLCkKN",[[["",{"children":["tasks",{"children":["(bst)",{"children":["implement-avl",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["tasks",{"children":["(bst)",{"children":["implement-avl",{"children":["__PAGE__",{},[["$L1",[["$","div",null,{"className":"task-heading","children":[["$","h1",null,{"children":"Реализовать AVL дерево"}],["$","p",null,{"children":["$","span",null,{"className":"difficulty fundamental","children":"Fundamental"}]}]]}],["$","div",null,{"className":"task","children":["$","$L2",null,{"ident":true,"children":[["$","$L3",null,{"title":[["$","svg",null,{"className":"icon","viewBox":"0 0 48 48","xmlns":"http://www.w3.org/2000/svg","style":{"color":"var(--blue)","height":"1.25rem","width":"1.25rem"},"children":["$","path",null,{"d":"M20.5 2C18.2034 2 16.3057 3.76662 16.0508 6H12.5C10.019 6 8 8.019 8 10.5V37.5C8 39.981 10.019 42 12.5 42H35.5C37.981 42 40 39.981 40 37.5V10.5C40 8.019 37.981 6 35.5 6H31.9492C31.6943 3.76662 29.7966 2 27.5 2H20.5ZM20.5 5H27.5C28.3465 5 29 5.6535 29 6.5C29 7.3465 28.3465 8 27.5 8H20.5C19.6535 8 19 7.3465 19 6.5C19 5.6535 19.6535 5 20.5 5ZM28.5 17.0352C29.4072 17.0352 30.3141 17.3654 30.9746 18.0254C31.6356 18.6854 32 19.564 32 20.5C32 21.436 31.6356 22.3136 30.9746 22.9746L22.4941 31.457C22.3691 31.583 22.2111 31.6737 22.0391 31.7187L17.2539 32.9687C17.1689 32.9897 17.084 33 17 33C16.738 33 16.483 32.897 16.293 32.707C16.042 32.456 15.9422 32.0901 16.0312 31.7461L17.2812 26.9629C17.3262 26.7909 17.417 26.6338 17.543 26.5078L26.0254 18.0254C26.6859 17.3654 27.5927 17.0352 28.5 17.0352Z","fill":"currentColor"}]}],"Задание"],"children":[["$","div",null,{"className":"par","children":["$","p",null,{"children":["Реализуйте AVL дерево. Само дерево должно быть реализовано как класс"," ",["$","span",null,{"className":"code","children":[["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"AVLTree"}}],false]}],"."]}]}],["$","div",null,{"className":"codeblock","children":[["$","div",null,{"className":"overflow-box","children":["$","code",null,{"className":"language-pseudocode","dangerouslySetInnerHTML":{"__html":"$4"}}]}],["$","$L5",null,{"text":"class node:\n    int value\n    node left\n    node right\n    \n    \nclass AVLTree:\n    node root\n\n    constructor(self):\n        создать пустое дерево\n    \n    method add(self, int x):\n        добавить число x в дерево\n        \n    method remove(self, int x):\n        удалить число x из дерева\n        \n    method find(self, int x) -> bool:\n        return есть ли число x в дереве?\n        \n    method find_next(self, int x) -> int:\n        return следующее за x число в дереве\n        \n    method find_prev(self, int x) -> int:\n        return предшествующее x число в дереве\n        \n    method min(self) -> int:\n        return минимальное число в дереве\n        \n    method max(self) -> int:\n        return максимальное число в дереве\n        \n    iterator inorder(self):\n        пройтись по всем ключам по порядку"}]]}]]}],"$undefined","$undefined"]}]}]],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a85cc6ffb2e23bf0.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/8a143d68bf994543.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/e1fa1c63977e8d7a.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/9a14623a98c77375.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","tasks","children","(bst)","children","implement-avl","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","tasks","children","(bst)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2bcfef0097ff2ff9.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/cffc39addae3f57c.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b1ef9917c41239b8.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/fe2eed3e70b09d81.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/80b1c1184eed4b6a.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","5",{"rel":"stylesheet","href":"/_next/static/css/1280e7cc5043b091.css","precedence":"next","crossOrigin":"$undefined"}]],["$","article",null,{"children":[["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","tasks","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}],["$","div",null,{"style":{"height":"5rem"}}]]}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ca4424af0186e525.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ru","children":["$","body",null,{"className":"__variable_8aafdc __variable_42bd1a","children":[["$","header",null,{"children":[["$","img",null,{"src":"/icon.svg","alt":"","role":"presentation"}],["$","nav",null,{"children":[["$","$L8",null,{"className":"colorless","href":"/","children":"Главная"}],["$","$L8",null,{"className":"colorless","href":"/knowledge","children":"База знаний"}],["$","$L8",null,{"className":"colorless","href":"/tasks","children":"Задачи"}]]}]]}],["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"error404","children":[["$","h1",null,{"children":[["$","span",null,{"children":"4"}],["$","span",null,{"children":"0"}],["$","span",null,{"children":"4"}]]}],"Без паники! Вы просто попали на несуществующую страницу."]}],"notFoundStyles":[]}]]}]}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Astra"}],["$","meta","3",{"name":"description","content":"..."}],["$","link","4",{"rel":"icon","href":"/icon.svg?3bdfcaa020873225","type":"image/svg+xml","sizes":"any"}]]
1:null
